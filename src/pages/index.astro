<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
		<meta name="theme-color" content="#0a0a0a" />
		<meta name="mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
		<link rel="manifest" href="/manifest.webmanifest" />
		<meta name="generator" content={Astro.generator} />
		<title>New Tab</title>
		<link rel="stylesheet" href="/style.css" />
	</head>
	<body>
		<button class="clock-toggle" id="clockToggle" title="Toggle Clock">
			<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
				<circle cx="12" cy="12" r="10"></circle>
				<polyline points="12,6 12,12 16,14"></polyline>
			</svg>
		</button>
		
		<div class="search-container">
			<div class="clock-widget" id="clockWidget">
				<div class="clock-time" id="clockTime">12:00</div>
				<div class="clock-date" id="clockDate">Loading...</div>
			</div>
			
			<div class="search-section">
				<form class="search-form" id="searchForm" action="https://duckduckgo.com/" method="get">
				<div class="search-engine-selector">
					<button type="button" class="engine-btn" id="engineBtn">
						<img src="https://duckduckgo.com/favicon.ico" alt="DuckDuckGo" class="engine-icon" id="engineIcon" />
						<svg class="dropdown-arrow" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
							<polyline points="6,9 12,15 18,9"></polyline>
						</svg>
					</button>
					<div class="engine-dropdown" id="engineDropdown">
						<div class="engine-option" data-engine="google" data-url="https://www.google.com/search" data-param="q">
							<img src="https://www.google.com/favicon.ico" alt="Google" class="engine-icon" />
							<span>Google</span>
						</div>
						<div class="engine-option" data-engine="bing" data-url="https://www.bing.com/search" data-param="q">
							<img src="https://www.bing.com/favicon.ico" alt="Bing" class="engine-icon" />
							<span>Bing</span>
						</div>
						<div class="engine-option" data-engine="yahoo" data-url="https://search.yahoo.com/search" data-param="p">
							<img src="https://www.yahoo.com/favicon.ico" alt="Yahoo" class="engine-icon" />
							<span>Yahoo</span>
						</div>
						<div class="engine-option active" data-engine="duckduckgo" data-url="https://duckduckgo.com/" data-param="q">
							<img src="https://duckduckgo.com/favicon.ico" alt="DuckDuckGo" class="engine-icon" />
							<span>DuckDuckGo</span>
						</div>
						<div class="engine-option" data-engine="yandex" data-url="https://yandex.com/search/" data-param="text">
							<img src="https://yandex.com/favicon.ico" alt="Yandex" class="engine-icon" />
							<span>Yandex</span>
						</div>
						<div class="engine-option" data-engine="baidu" data-url="https://www.baidu.com/s" data-param="wd">
							<img src="https://www.baidu.com/favicon.ico" alt="Baidu" class="engine-icon" />
							<span>Baidu</span>
						</div>
						<div class="engine-option" data-engine="startpage" data-url="https://www.startpage.com/do/dsearch" data-param="query">
							<img src="https://www.startpage.com/favicon.ico" alt="Startpage" class="engine-icon" />
							<span>Startpage</span>
						</div>
						<div class="engine-option" data-engine="searx" data-url="https://searx.org/" data-param="q">
							<img src="https://searx.org/favicon.ico" alt="SearX" class="engine-icon" />
							<span>SearX</span>
						</div>
						<div class="engine-option" data-engine="ecosia" data-url="https://www.ecosia.org/search" data-param="q">
							<img src="https://www.ecosia.org/favicon.ico" alt="Ecosia" class="engine-icon" />
							<span>Ecosia</span>
						</div>
						<div class="engine-option" data-engine="brave" data-url="https://search.brave.com/search" data-param="q">
							<img src="https://brave.com/static-assets/images/brave-logo-sans-text.svg" alt="Brave Search" class="engine-icon" />
							<span>Brave</span>
						</div>
					</div>
				</div>
				<input 
					type="text" 
					name="q" 
					id="searchQuery"
					class="search-input" 
					placeholder="Search the web..." 
					autocomplete="off"
					autofocus
				/>
				<button type="submit" class="search-btn">
					<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
						<circle cx="11" cy="11" r="8"></circle>
						<path d="m21 21-4.35-4.35"></path>
					</svg>
				</button>
			</form>
			
			<!-- Quick Links -->
			<div class="quick-links" id="quickLinks">
				<div class="links-container" id="linksContainer">
					<!-- Links will be populated by JavaScript -->
				</div>
				<button class="add-link-btn" id="addLinkBtn" title="Add Quick Link">
					<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
						<line x1="12" y1="5" x2="12" y2="19"></line>
						<line x1="5" y1="12" x2="19" y2="12"></line>
					</svg>
				</button>
			</div>

			<!-- Add Link Modal -->
			<div class="modal-overlay" id="modalOverlay">
				<div class="modal">
					<div class="modal-header">
						<h3>Add Quick Link</h3>
						<button class="modal-close" id="modalClose">
							<svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
								<line x1="18" y1="6" x2="6" y2="18"></line>
								<line x1="6" y1="6" x2="18" y2="18"></line>
							</svg>
						</button>
					</div>
					<div class="modal-body">
						<div class="input-group">
							<label for="linkName">Name</label>
							<input type="text" id="linkName" placeholder="e.g. GitHub" maxlength="20" />
						</div>
						<div class="input-group">
							<label for="linkUrl">URL</label>
							<input type="url" id="linkUrl" placeholder="https://github.com" />
						</div>
					</div>
					<div class="modal-footer">
						<button class="btn btn-secondary" id="modalCancel">Cancel</button>
						<button class="btn btn-primary" id="modalSave">Add Link</button>
					</div>
				</div>
			</div>
			</div>
		</div>

		<footer class="footer">
			<a href="https://ballabotond.com" target="_blank" rel="noopener noreferrer" class="credit-link">
				Made by Balla Botond
			</a>
		</footer>

		<script>
			// Search engine data
			const searchEngines = {
				google: { url: 'https://www.google.com/search', param: 'q', icon: 'https://www.google.com/favicon.ico', name: 'Google' },
				bing: { url: 'https://www.bing.com/search', param: 'q', icon: 'https://www.bing.com/favicon.ico', name: 'Bing' },
				yahoo: { url: 'https://search.yahoo.com/search', param: 'p', icon: 'https://www.yahoo.com/favicon.ico', name: 'Yahoo' },
				duckduckgo: { url: 'https://duckduckgo.com/', param: 'q', icon: 'https://duckduckgo.com/favicon.ico', name: 'DuckDuckGo' },
				yandex: { url: 'https://yandex.com/search/', param: 'text', icon: 'https://yandex.com/favicon.ico', name: 'Yandex' },
				baidu: { url: 'https://www.baidu.com/s', param: 'wd', icon: 'https://www.baidu.com/favicon.ico', name: 'Baidu' },
				startpage: { url: 'https://www.startpage.com/do/dsearch', param: 'query', icon: 'https://www.startpage.com/favicon.ico', name: 'Startpage' },
				searx: { url: 'https://searx.org/', param: 'q', icon: 'https://searx.org/favicon.ico', name: 'SearX' },
				ecosia: { url: 'https://www.ecosia.org/search', param: 'q', icon: 'https://www.ecosia.org/favicon.ico', name: 'Ecosia' },
				brave: { url: 'https://search.brave.com/search', param: 'q', icon: 'https://brave.com/static-assets/images/brave-logo-sans-text.svg', name: 'Brave Search' }
			};

			let currentEngine = 'duckduckgo';

			// Load saved engine from localStorage
			function loadSavedEngine() {
				const saved = localStorage.getItem('search-engine');
				if (saved && searchEngines[saved as keyof typeof searchEngines]) {
					currentEngine = saved;
				}
				updateSearchEngine(currentEngine);
			}

			// Save engine to localStorage
			function saveEngine(engine: string) {
				localStorage.setItem('search-engine', engine);
			}

			// Update the search form and UI
			function updateSearchEngine(engine: string) {
				const form = document.getElementById('searchForm') as HTMLFormElement;
				const engineIcon = document.getElementById('engineIcon') as HTMLImageElement;
				const searchInput = document.getElementById('searchQuery') as HTMLInputElement;
				
				if (!form || !engineIcon || !searchInput) return;
				
				const engineData = searchEngines[engine as keyof typeof searchEngines];
				
				// Update form action and input name
				form.action = engineData.url;
				searchInput.name = engineData.param;
				
				// Update icon
				engineIcon.src = engineData.icon;
				engineIcon.alt = engineData.name;
				
				// Update active state in dropdown
				document.querySelectorAll('.engine-option').forEach(option => {
					option.classList.remove('active');
				});
				const activeOption = document.querySelector(`[data-engine="${engine}"]`);
				if (activeOption) {
					activeOption.classList.add('active');
				}
				
				currentEngine = engine;
			}

			// Clock functionality
			function updateClock(): void {
				const now = new Date();
				const timeElement = document.getElementById('clockTime') as HTMLElement;
				const dateElement = document.getElementById('clockDate') as HTMLElement;
				
				if (timeElement && dateElement) {
					timeElement.textContent = now.toLocaleTimeString('en-US', {
						hour12: false,
						hour: '2-digit',
						minute: '2-digit'
					});
					
					dateElement.textContent = now.toLocaleDateString('en-US', {
						weekday: 'long',
						year: 'numeric',
						month: 'long',
						day: 'numeric'
					});
				}
			}

			function toggleClock(): void {
				const clockWidget = document.getElementById('clockWidget') as HTMLElement;
				const isVisible = clockWidget && !clockWidget.hidden;
				
				if (clockWidget) {
					clockWidget.hidden = isVisible;
					localStorage.setItem('clockVisible', isVisible ? 'false' : 'true');
				}
			}

			function loadClockPreference(): void {
				const clockWidget = document.getElementById('clockWidget') as HTMLElement;
				const isVisible = localStorage.getItem('clockVisible') !== 'false';
				
				if (clockWidget) {
					clockWidget.hidden = !isVisible;
				}
			}

			// Quick Links functionality
			interface QuickLink {
				id: string;
				name: string;
				url: string;
			}

			function getQuickLinks(): QuickLink[] {
				const links = localStorage.getItem('quickLinks');
				return links ? JSON.parse(links) : [];
			}

			function saveQuickLinks(links: QuickLink[]): void {
				localStorage.setItem('quickLinks', JSON.stringify(links));
			}

			function addQuickLink(name: string, url: string): void {
				const links = getQuickLinks();
				const newLink: QuickLink = {
					id: Date.now().toString(),
					name: name.trim(),
					url: url.trim()
				};
				links.push(newLink);
				saveQuickLinks(links);
				renderQuickLinks();
			}

			function removeQuickLink(id: string): void {
				const links = getQuickLinks().filter(link => link.id !== id);
				saveQuickLinks(links);
				renderQuickLinks();
			}

			function renderQuickLinks(): void {
				const container = document.getElementById('linksContainer') as HTMLElement;
				const quickLinksSection = document.getElementById('quickLinks') as HTMLElement;
				
				if (!container || !quickLinksSection) return;
				
				const links = getQuickLinks();
				container.innerHTML = '';
				
				if (links.length === 0) {
					quickLinksSection.classList.add('empty');
				} else {
					quickLinksSection.classList.remove('empty');
				}
				
				links.forEach(link => {
					const linkElement = document.createElement('div');
					linkElement.className = 'quick-link-item';
					
					linkElement.innerHTML = `
						<a href="${link.url}" target="_blank" rel="noopener noreferrer" class="link-button">
							<span class="link-name">${link.name}</span>
							<span class="link-domain">${getDomain(link.url)}</span>
						</a>
						<button class="remove-link" data-id="${link.id}" title="Remove ${link.name}">
							<svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
								<line x1="18" y1="6" x2="6" y2="18"></line>
								<line x1="6" y1="6" x2="18" y2="18"></line>
							</svg>
						</button>
					`;
					
					container.appendChild(linkElement);
				});
				
				// Add event listeners for remove buttons
				container.querySelectorAll('.remove-link').forEach(btn => {
					btn.addEventListener('click', (e) => {
						e.preventDefault();
						const id = (e.currentTarget as HTMLElement).getAttribute('data-id');
						if (id) removeQuickLink(id);
					});
				});
			}

			function getDomain(url: string): string {
				try {
					return new URL(url).hostname.replace('www.', '');
				} catch {
					return '';
				}
			}

			function showAddLinkModal(): void {
				const modal = document.getElementById('modalOverlay') as HTMLElement;
				const nameInput = document.getElementById('linkName') as HTMLInputElement;
				const urlInput = document.getElementById('linkUrl') as HTMLInputElement;
				
				if (modal && nameInput && urlInput) {
					nameInput.value = '';
					urlInput.value = '';
					modal.classList.add('show');
					nameInput.focus();
				}
			}

			function hideAddLinkModal(): void {
				const modal = document.getElementById('modalOverlay') as HTMLElement;
				if (modal) {
					modal.classList.remove('show');
				}
			}

			function handleAddLink(): void {
				const nameInput = document.getElementById('linkName') as HTMLInputElement;
				const urlInput = document.getElementById('linkUrl') as HTMLInputElement;
				
				if (!nameInput || !urlInput) return;
				
				const name = nameInput.value.trim();
				const url = urlInput.value.trim();
				
				if (!name || !url) return;
				
				// Add protocol if missing
				const finalUrl = url.startsWith('http') ? url : `https://${url}`;
				
				addQuickLink(name, finalUrl);
				hideAddLinkModal();
			}

			// Initialize on page load
			document.addEventListener('DOMContentLoaded', () => {
				loadSavedEngine();
				
				const engineBtn = document.getElementById('engineBtn');
				const engineDropdown = document.getElementById('engineDropdown');
				const searchInput = document.querySelector('.search-input') as HTMLInputElement;
				const clockToggle = document.getElementById('clockToggle') as HTMLButtonElement;
				const addLinkBtn = document.getElementById('addLinkBtn') as HTMLButtonElement;
				const modalOverlay = document.getElementById('modalOverlay') as HTMLElement;
				const modalClose = document.getElementById('modalClose') as HTMLButtonElement;
				const modalCancel = document.getElementById('modalCancel') as HTMLButtonElement;
				const modalSave = document.getElementById('modalSave') as HTMLButtonElement;
				const linkNameInput = document.getElementById('linkName') as HTMLInputElement;
				const linkUrlInput = document.getElementById('linkUrl') as HTMLInputElement;
				
				if (!engineBtn || !engineDropdown || !searchInput) return;
				
				// Load and start clock
				loadClockPreference();
				updateClock();
				setInterval(updateClock, 1000);
				
				// Load quick links
				renderQuickLinks();
				
				// Clock toggle functionality
				if (clockToggle) {
					clockToggle.addEventListener('click', toggleClock);
				}
				
				// Quick links functionality
				if (addLinkBtn) {
					addLinkBtn.addEventListener('click', showAddLinkModal);
				}
				
				if (modalClose && modalCancel) {
					modalClose.addEventListener('click', hideAddLinkModal);
					modalCancel.addEventListener('click', hideAddLinkModal);
				}
				
				if (modalOverlay) {
					modalOverlay.addEventListener('click', (e) => {
						if (e.target === modalOverlay) {
							hideAddLinkModal();
						}
					});
				}
				
				if (modalSave) {
					modalSave.addEventListener('click', handleAddLink);
				}
				
				// Handle Enter key in modal inputs
				if (linkNameInput && linkUrlInput) {
					const handleEnter = (e: KeyboardEvent) => {
						if (e.key === 'Enter') {
							handleAddLink();
						}
					};
					linkNameInput.addEventListener('keydown', handleEnter);
					linkUrlInput.addEventListener('keydown', handleEnter);
				}
				
				// Toggle dropdown
				engineBtn.addEventListener('click', (e) => {
					e.preventDefault();
					engineDropdown.classList.toggle('show');
				});
				
				// Handle engine selection
				document.querySelectorAll('.engine-option').forEach(option => {
					option.addEventListener('click', () => {
						const engine = option.getAttribute('data-engine');
						if (engine) {
							updateSearchEngine(engine);
							saveEngine(engine);
							engineDropdown.classList.remove('show');
							searchInput.focus();
						}
					});
				});
				
				// Close dropdown when clicking outside
				document.addEventListener('click', (e) => {
					const target = e.target as HTMLElement;
					if (target && !target.closest('.search-engine-selector')) {
						engineDropdown.classList.remove('show');
					}
				});
				
				// Focus search input on key press
				document.addEventListener('keydown', (e) => {
					const modal = document.getElementById('modalOverlay') as HTMLElement;
					const isModalOpen = modal && modal.classList.contains('show');
					
					// Don't auto-focus search if modal is open or if already focused on an input
					if (isModalOpen || document.activeElement?.tagName === 'INPUT' || document.activeElement === searchInput) {
						return;
					}
					
					if (e.key.length === 1) {
						searchInput.focus();
					}
				});
			});
		</script>
	</body>
</html>
